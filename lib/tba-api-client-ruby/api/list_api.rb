=begin
#The Blue Alliance API v3

## Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

OpenAPI spec version: 3.03.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module TBA API v3 Ruby Client
  class ListApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # Gets a list of events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<Event>]
    def get_district_events(district_key, opts = {})
      data, _status_code, _headers = get_district_events_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a list of events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<Event>, Fixnum, Hash)>] Array<Event> data, response status code and response headers
    def get_district_events_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_events ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_events"
      end
      # resource path
      local_var_path = "/district/{district_key}/events".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Event>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_events\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of event keys for events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<String>]
    def get_district_events_keys(district_key, opts = {})
      data, _status_code, _headers = get_district_events_keys_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a list of event keys for events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_district_events_keys_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_events_keys ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_events_keys"
      end
      # resource path
      local_var_path = "/district/{district_key}/events/keys".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_events_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a short-form list of events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<EventSimple>]
    def get_district_events_simple(district_key, opts = {})
      data, _status_code, _headers = get_district_events_simple_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a short-form list of events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<EventSimple>, Fixnum, Hash)>] Array<EventSimple> data, response status code and response headers
    def get_district_events_simple_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_events_simple ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_events_simple"
      end
      # resource path
      local_var_path = "/district/{district_key}/events/simple".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EventSimple>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_events_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of team district rankings for the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<DistrictRanking>]
    def get_district_rankings(district_key, opts = {})
      data, _status_code, _headers = get_district_rankings_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a list of team district rankings for the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<DistrictRanking>, Fixnum, Hash)>] Array<DistrictRanking> data, response status code and response headers
    def get_district_rankings_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_rankings ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_rankings"
      end
      # resource path
      local_var_path = "/district/{district_key}/rankings".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<DistrictRanking>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_rankings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of `Team` objects that competed in events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<Team>]
    def get_district_teams(district_key, opts = {})
      data, _status_code, _headers = get_district_teams_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<Team>, Fixnum, Hash)>] Array<Team> data, response status code and response headers
    def get_district_teams_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_teams ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_teams"
      end
      # resource path
      local_var_path = "/district/{district_key}/teams".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Team>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of `Team` objects that competed in events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<String>]
    def get_district_teams_keys(district_key, opts = {})
      data, _status_code, _headers = get_district_teams_keys_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a list of &#x60;Team&#x60; objects that competed in events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_district_teams_keys_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_teams_keys ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_teams_keys"
      end
      # resource path
      local_var_path = "/district/{district_key}/teams/keys".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_teams_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a short-form list of `Team` objects that competed in events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<TeamSimple>]
    def get_district_teams_simple(district_key, opts = {})
      data, _status_code, _headers = get_district_teams_simple_with_http_info(district_key, opts)
      return data
    end

    # 
    # Gets a short-form list of &#x60;Team&#x60; objects that competed in events in the given district.
    # @param district_key TBA District Key, eg &#x60;2016fim&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<TeamSimple>, Fixnum, Hash)>] Array<TeamSimple> data, response status code and response headers
    def get_district_teams_simple_with_http_info(district_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_district_teams_simple ..."
      end
      # verify the required parameter 'district_key' is set
      if @api_client.config.client_side_validation && district_key.nil?
        fail ArgumentError, "Missing the required parameter 'district_key' when calling ListApi.get_district_teams_simple"
      end
      # resource path
      local_var_path = "/district/{district_key}/teams/simple".sub('{' + 'district_key' + '}', district_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamSimple>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_district_teams_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of `Team` objects that competed in the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<Team>]
    def get_event_teams(event_key, opts = {})
      data, _status_code, _headers = get_event_teams_with_http_info(event_key, opts)
      return data
    end

    # 
    # Gets a list of &#x60;Team&#x60; objects that competed in the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<Team>, Fixnum, Hash)>] Array<Team> data, response status code and response headers
    def get_event_teams_with_http_info(event_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_event_teams ..."
      end
      # verify the required parameter 'event_key' is set
      if @api_client.config.client_side_validation && event_key.nil?
        fail ArgumentError, "Missing the required parameter 'event_key' when calling ListApi.get_event_teams"
      end
      # resource path
      local_var_path = "/event/{event_key}/teams".sub('{' + 'event_key' + '}', event_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Team>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_event_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of `Team` keys that competed in the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<String>]
    def get_event_teams_keys(event_key, opts = {})
      data, _status_code, _headers = get_event_teams_keys_with_http_info(event_key, opts)
      return data
    end

    # 
    # Gets a list of &#x60;Team&#x60; keys that competed in the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_event_teams_keys_with_http_info(event_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_event_teams_keys ..."
      end
      # verify the required parameter 'event_key' is set
      if @api_client.config.client_side_validation && event_key.nil?
        fail ArgumentError, "Missing the required parameter 'event_key' when calling ListApi.get_event_teams_keys"
      end
      # resource path
      local_var_path = "/event/{event_key}/teams/keys".sub('{' + 'event_key' + '}', event_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_event_teams_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a short-form list of `Team` objects that competed in the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<TeamSimple>]
    def get_event_teams_simple(event_key, opts = {})
      data, _status_code, _headers = get_event_teams_simple_with_http_info(event_key, opts)
      return data
    end

    # 
    # Gets a short-form list of &#x60;Team&#x60; objects that competed in the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<TeamSimple>, Fixnum, Hash)>] Array<TeamSimple> data, response status code and response headers
    def get_event_teams_simple_with_http_info(event_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_event_teams_simple ..."
      end
      # verify the required parameter 'event_key' is set
      if @api_client.config.client_side_validation && event_key.nil?
        fail ArgumentError, "Missing the required parameter 'event_key' when calling ListApi.get_event_teams_simple"
      end
      # resource path
      local_var_path = "/event/{event_key}/teams/simple".sub('{' + 'event_key' + '}', event_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamSimple>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_event_teams_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a key-value list of the event statuses for teams competing at the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Hash<String, TeamEventStatus>]
    def get_event_teams_statuses(event_key, opts = {})
      data, _status_code, _headers = get_event_teams_statuses_with_http_info(event_key, opts)
      return data
    end

    # 
    # Gets a key-value list of the event statuses for teams competing at the given event.
    # @param event_key TBA Event Key, eg &#x60;2016nytr&#x60;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Hash<String, TeamEventStatus>, Fixnum, Hash)>] Hash<String, TeamEventStatus> data, response status code and response headers
    def get_event_teams_statuses_with_http_info(event_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_event_teams_statuses ..."
      end
      # verify the required parameter 'event_key' is set
      if @api_client.config.client_side_validation && event_key.nil?
        fail ArgumentError, "Missing the required parameter 'event_key' when calling ListApi.get_event_teams_statuses"
      end
      # resource path
      local_var_path = "/event/{event_key}/teams/statuses".sub('{' + 'event_key' + '}', event_key.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, TeamEventStatus>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_event_teams_statuses\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of events in the given year.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<Event>]
    def get_events_by_year(year, opts = {})
      data, _status_code, _headers = get_events_by_year_with_http_info(year, opts)
      return data
    end

    # 
    # Gets a list of events in the given year.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<Event>, Fixnum, Hash)>] Array<Event> data, response status code and response headers
    def get_events_by_year_with_http_info(year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_events_by_year ..."
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_events_by_year"
      end
      # resource path
      local_var_path = "/events/{year}".sub('{' + 'year' + '}', year.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Event>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_events_by_year\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of event keys in the given year.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<String>]
    def get_events_by_year_keys(year, opts = {})
      data, _status_code, _headers = get_events_by_year_keys_with_http_info(year, opts)
      return data
    end

    # 
    # Gets a list of event keys in the given year.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_events_by_year_keys_with_http_info(year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_events_by_year_keys ..."
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_events_by_year_keys"
      end
      # resource path
      local_var_path = "/events/{year}/keys".sub('{' + 'year' + '}', year.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_events_by_year_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a short-form list of events in the given year.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<EventSimple>]
    def get_events_by_year_simple(year, opts = {})
      data, _status_code, _headers = get_events_by_year_simple_with_http_info(year, opts)
      return data
    end

    # 
    # Gets a short-form list of events in the given year.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<EventSimple>, Fixnum, Hash)>] Array<EventSimple> data, response status code and response headers
    def get_events_by_year_simple_with_http_info(year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_events_by_year_simple ..."
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_events_by_year_simple"
      end
      # resource path
      local_var_path = "/events/{year}/simple".sub('{' + 'year' + '}', year.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<EventSimple>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_events_by_year_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a key-value list of the event statuses for events this team has competed at in the given year.
    # @param team_key TBA Team Key, eg &#x60;frc254&#x60;
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Hash<String, TeamEventStatus>]
    def get_team_events_statuses_by_year(team_key, year, opts = {})
      data, _status_code, _headers = get_team_events_statuses_by_year_with_http_info(team_key, year, opts)
      return data
    end

    # 
    # Gets a key-value list of the event statuses for events this team has competed at in the given year.
    # @param team_key TBA Team Key, eg &#x60;frc254&#x60;
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Hash<String, TeamEventStatus>, Fixnum, Hash)>] Hash<String, TeamEventStatus> data, response status code and response headers
    def get_team_events_statuses_by_year_with_http_info(team_key, year, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_team_events_statuses_by_year ..."
      end
      # verify the required parameter 'team_key' is set
      if @api_client.config.client_side_validation && team_key.nil?
        fail ArgumentError, "Missing the required parameter 'team_key' when calling ListApi.get_team_events_statuses_by_year"
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_team_events_statuses_by_year"
      end
      # resource path
      local_var_path = "/team/{team_key}/events/{year}/statuses".sub('{' + 'team_key' + '}', team_key.to_s).sub('{' + 'year' + '}', year.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Hash<String, TeamEventStatus>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_team_events_statuses_by_year\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of `Team` objects, paginated in groups of 500.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<Team>]
    def get_teams(page_num, opts = {})
      data, _status_code, _headers = get_teams_with_http_info(page_num, opts)
      return data
    end

    # 
    # Gets a list of &#x60;Team&#x60; objects, paginated in groups of 500.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<Team>, Fixnum, Hash)>] Array<Team> data, response status code and response headers
    def get_teams_with_http_info(page_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_teams ..."
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling ListApi.get_teams"
      end
      # resource path
      local_var_path = "/teams/{page_num}".sub('{' + 'page_num' + '}', page_num.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Team>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_teams\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of `Team` objects that competed in the given year, paginated in groups of 500.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<Team>]
    def get_teams_by_year(year, page_num, opts = {})
      data, _status_code, _headers = get_teams_by_year_with_http_info(year, page_num, opts)
      return data
    end

    # 
    # Gets a list of &#x60;Team&#x60; objects that competed in the given year, paginated in groups of 500.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<Team>, Fixnum, Hash)>] Array<Team> data, response status code and response headers
    def get_teams_by_year_with_http_info(year, page_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_teams_by_year ..."
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_teams_by_year"
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling ListApi.get_teams_by_year"
      end
      # resource path
      local_var_path = "/teams/{year}/{page_num}".sub('{' + 'year' + '}', year.to_s).sub('{' + 'page_num' + '}', page_num.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<Team>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_teams_by_year\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<String>]
    def get_teams_by_year_keys(year, page_num, opts = {})
      data, _status_code, _headers = get_teams_by_year_keys_with_http_info(year, page_num, opts)
      return data
    end

    # 
    # Gets a list Team Keys that competed in the given year, paginated in groups of 500.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_teams_by_year_keys_with_http_info(year, page_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_teams_by_year_keys ..."
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_teams_by_year_keys"
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling ListApi.get_teams_by_year_keys"
      end
      # resource path
      local_var_path = "/teams/{year}/{page_num}/keys".sub('{' + 'year' + '}', year.to_s).sub('{' + 'page_num' + '}', page_num.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_teams_by_year_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of short form `Team_Simple` objects that competed in the given year, paginated in groups of 500.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<TeamSimple>]
    def get_teams_by_year_simple(year, page_num, opts = {})
      data, _status_code, _headers = get_teams_by_year_simple_with_http_info(year, page_num, opts)
      return data
    end

    # 
    # Gets a list of short form &#x60;Team_Simple&#x60; objects that competed in the given year, paginated in groups of 500.
    # @param year Competition Year (or Season). Must be 4 digits.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<TeamSimple>, Fixnum, Hash)>] Array<TeamSimple> data, response status code and response headers
    def get_teams_by_year_simple_with_http_info(year, page_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_teams_by_year_simple ..."
      end
      # verify the required parameter 'year' is set
      if @api_client.config.client_side_validation && year.nil?
        fail ArgumentError, "Missing the required parameter 'year' when calling ListApi.get_teams_by_year_simple"
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling ListApi.get_teams_by_year_simple"
      end
      # resource path
      local_var_path = "/teams/{year}/{page_num}/simple".sub('{' + 'year' + '}', year.to_s).sub('{' + 'page_num' + '}', page_num.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamSimple>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_teams_by_year_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<String>]
    def get_teams_keys(page_num, opts = {})
      data, _status_code, _headers = get_teams_keys_with_http_info(page_num, opts)
      return data
    end

    # 
    # Gets a list of Team keys, paginated in groups of 500. (Note, each page will not have 500 teams, but will include the teams within that range of 500.)
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<String>, Fixnum, Hash)>] Array<String> data, response status code and response headers
    def get_teams_keys_with_http_info(page_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_teams_keys ..."
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling ListApi.get_teams_keys"
      end
      # resource path
      local_var_path = "/teams/{page_num}/keys".sub('{' + 'page_num' + '}', page_num.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<String>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_teams_keys\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # Gets a list of short form `Team_Simple` objects, paginated in groups of 500.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<TeamSimple>]
    def get_teams_simple(page_num, opts = {})
      data, _status_code, _headers = get_teams_simple_with_http_info(page_num, opts)
      return data
    end

    # 
    # Gets a list of short form &#x60;Team_Simple&#x60; objects, paginated in groups of 500.
    # @param page_num Page number of results to return, zero-indexed
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Value of the &#x60;Last-Modified&#x60; header in the most recently cached response by the client.
    # @return [Array<(Array<TeamSimple>, Fixnum, Hash)>] Array<TeamSimple> data, response status code and response headers
    def get_teams_simple_with_http_info(page_num, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: ListApi.get_teams_simple ..."
      end
      # verify the required parameter 'page_num' is set
      if @api_client.config.client_side_validation && page_num.nil?
        fail ArgumentError, "Missing the required parameter 'page_num' when calling ListApi.get_teams_simple"
      end
      # resource path
      local_var_path = "/teams/{page_num}/simple".sub('{' + 'page_num' + '}', page_num.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['apiKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<TeamSimple>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ListApi#get_teams_simple\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
