=begin
#The Blue Alliance API v3

## Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

OpenAPI spec version: 3.04.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.0.0-beta2

=end

require 'date'

module TBA API v3 Ruby Client
  class APIStatus
    # Year of the current FRC season.
    attr_accessor :current_season

    # Maximum FRC season year for valid queries.
    attr_accessor :max_season

    # True if the entire FMS API provided by FIRST is down.
    attr_accessor :is_datafeed_down

    # An array of strings containing event keys of any active events that are no longer updating.
    attr_accessor :down_events

    attr_accessor :ios

    attr_accessor :android

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'current_season' => :'current_season',
        :'max_season' => :'max_season',
        :'is_datafeed_down' => :'is_datafeed_down',
        :'down_events' => :'down_events',
        :'ios' => :'ios',
        :'android' => :'android'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'current_season' => :'Integer',
        :'max_season' => :'Integer',
        :'is_datafeed_down' => :'BOOLEAN',
        :'down_events' => :'Array<String>',
        :'ios' => :'APIStatusAppVersion',
        :'android' => :'APIStatusAppVersion'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'current_season')
        self.current_season = attributes[:'current_season']
      end

      if attributes.has_key?(:'max_season')
        self.max_season = attributes[:'max_season']
      end

      if attributes.has_key?(:'is_datafeed_down')
        self.is_datafeed_down = attributes[:'is_datafeed_down']
      end

      if attributes.has_key?(:'down_events')
        if (value = attributes[:'down_events']).is_a?(Array)
          self.down_events = value
        end
      end

      if attributes.has_key?(:'ios')
        self.ios = attributes[:'ios']
      end

      if attributes.has_key?(:'android')
        self.android = attributes[:'android']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @current_season.nil?
        invalid_properties.push('invalid value for "current_season", current_season cannot be nil.')
      end

      if @max_season.nil?
        invalid_properties.push('invalid value for "max_season", max_season cannot be nil.')
      end

      if @is_datafeed_down.nil?
        invalid_properties.push('invalid value for "is_datafeed_down", is_datafeed_down cannot be nil.')
      end

      if @down_events.nil?
        invalid_properties.push('invalid value for "down_events", down_events cannot be nil.')
      end

      if @ios.nil?
        invalid_properties.push('invalid value for "ios", ios cannot be nil.')
      end

      if @android.nil?
        invalid_properties.push('invalid value for "android", android cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @current_season.nil?
      return false if @max_season.nil?
      return false if @is_datafeed_down.nil?
      return false if @down_events.nil?
      return false if @ios.nil?
      return false if @android.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          current_season == o.current_season &&
          max_season == o.max_season &&
          is_datafeed_down == o.is_datafeed_down &&
          down_events == o.down_events &&
          ios == o.ios &&
          android == o.android
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [current_season, max_season, is_datafeed_down, down_events, ios, android].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TBA API v3 Ruby Client.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
