=begin
#The Blue Alliance API v3

## Overview    Information and statistics about FIRST Robotics Competition teams and events.   # Authentication   All endpoints require an Auth Key to be passed in the header `X-TBA-Auth-Key`. If you do not have an auth key yet, you can obtain one from your [Account Page](/account).    A `User-Agent` header may need to be set to prevent a 403 Unauthorized error.

The version of the OpenAPI document: 3.8.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module TBA API v3 Ruby Client
  class MatchScoreBreakdown2020Alliance
    attr_accessor :init_line_robot1

    attr_accessor :endgame_robot1

    attr_accessor :init_line_robot2

    attr_accessor :endgame_robot2

    attr_accessor :init_line_robot3

    attr_accessor :endgame_robot3

    attr_accessor :auto_cells_bottom

    attr_accessor :auto_cells_outer

    attr_accessor :auto_cells_inner

    attr_accessor :teleop_cells_bottom

    attr_accessor :teleop_cells_outer

    attr_accessor :teleop_cells_inner

    attr_accessor :stage1_activated

    attr_accessor :stage2_activated

    attr_accessor :stage3_activated

    attr_accessor :stage3_target_color

    attr_accessor :endgame_rung_is_level

    attr_accessor :auto_init_line_points

    attr_accessor :auto_cell_points

    attr_accessor :auto_points

    attr_accessor :teleop_cell_points

    attr_accessor :control_panel_points

    attr_accessor :endgame_points

    attr_accessor :teleop_points

    attr_accessor :shield_operational_ranking_point

    attr_accessor :shield_energized_ranking_point

    # Unofficial TBA-computed value that indicates whether the shieldEnergizedRankingPoint was earned normally or awarded due to a foul.
    attr_accessor :tba_shield_energized_ranking_point_from_foul

    # Unofficial TBA-computed value that counts the number of robots who were hanging at the end of the match.
    attr_accessor :tba_num_robots_hanging

    attr_accessor :foul_count

    attr_accessor :tech_foul_count

    attr_accessor :adjust_points

    attr_accessor :foul_points

    attr_accessor :rp

    attr_accessor :total_points

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'init_line_robot1' => :'initLineRobot1',
        :'endgame_robot1' => :'endgameRobot1',
        :'init_line_robot2' => :'initLineRobot2',
        :'endgame_robot2' => :'endgameRobot2',
        :'init_line_robot3' => :'initLineRobot3',
        :'endgame_robot3' => :'endgameRobot3',
        :'auto_cells_bottom' => :'autoCellsBottom',
        :'auto_cells_outer' => :'autoCellsOuter',
        :'auto_cells_inner' => :'autoCellsInner',
        :'teleop_cells_bottom' => :'teleopCellsBottom',
        :'teleop_cells_outer' => :'teleopCellsOuter',
        :'teleop_cells_inner' => :'teleopCellsInner',
        :'stage1_activated' => :'stage1Activated',
        :'stage2_activated' => :'stage2Activated',
        :'stage3_activated' => :'stage3Activated',
        :'stage3_target_color' => :'stage3TargetColor',
        :'endgame_rung_is_level' => :'endgameRungIsLevel',
        :'auto_init_line_points' => :'autoInitLinePoints',
        :'auto_cell_points' => :'autoCellPoints',
        :'auto_points' => :'autoPoints',
        :'teleop_cell_points' => :'teleopCellPoints',
        :'control_panel_points' => :'controlPanelPoints',
        :'endgame_points' => :'endgamePoints',
        :'teleop_points' => :'teleopPoints',
        :'shield_operational_ranking_point' => :'shieldOperationalRankingPoint',
        :'shield_energized_ranking_point' => :'shieldEnergizedRankingPoint',
        :'tba_shield_energized_ranking_point_from_foul' => :'tba_shieldEnergizedRankingPointFromFoul',
        :'tba_num_robots_hanging' => :'tba_numRobotsHanging',
        :'foul_count' => :'foulCount',
        :'tech_foul_count' => :'techFoulCount',
        :'adjust_points' => :'adjustPoints',
        :'foul_points' => :'foulPoints',
        :'rp' => :'rp',
        :'total_points' => :'totalPoints'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'init_line_robot1' => :'String',
        :'endgame_robot1' => :'String',
        :'init_line_robot2' => :'String',
        :'endgame_robot2' => :'String',
        :'init_line_robot3' => :'String',
        :'endgame_robot3' => :'String',
        :'auto_cells_bottom' => :'Integer',
        :'auto_cells_outer' => :'Integer',
        :'auto_cells_inner' => :'Integer',
        :'teleop_cells_bottom' => :'Integer',
        :'teleop_cells_outer' => :'Integer',
        :'teleop_cells_inner' => :'Integer',
        :'stage1_activated' => :'Boolean',
        :'stage2_activated' => :'Boolean',
        :'stage3_activated' => :'Boolean',
        :'stage3_target_color' => :'String',
        :'endgame_rung_is_level' => :'String',
        :'auto_init_line_points' => :'Integer',
        :'auto_cell_points' => :'Integer',
        :'auto_points' => :'Integer',
        :'teleop_cell_points' => :'Integer',
        :'control_panel_points' => :'Integer',
        :'endgame_points' => :'Integer',
        :'teleop_points' => :'Integer',
        :'shield_operational_ranking_point' => :'Boolean',
        :'shield_energized_ranking_point' => :'Boolean',
        :'tba_shield_energized_ranking_point_from_foul' => :'Boolean',
        :'tba_num_robots_hanging' => :'Integer',
        :'foul_count' => :'Integer',
        :'tech_foul_count' => :'Integer',
        :'adjust_points' => :'Integer',
        :'foul_points' => :'Integer',
        :'rp' => :'Integer',
        :'total_points' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TBA API v3 Ruby Client::MatchScoreBreakdown2020Alliance` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TBA API v3 Ruby Client::MatchScoreBreakdown2020Alliance`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'init_line_robot1')
        self.init_line_robot1 = attributes[:'init_line_robot1']
      end

      if attributes.key?(:'endgame_robot1')
        self.endgame_robot1 = attributes[:'endgame_robot1']
      end

      if attributes.key?(:'init_line_robot2')
        self.init_line_robot2 = attributes[:'init_line_robot2']
      end

      if attributes.key?(:'endgame_robot2')
        self.endgame_robot2 = attributes[:'endgame_robot2']
      end

      if attributes.key?(:'init_line_robot3')
        self.init_line_robot3 = attributes[:'init_line_robot3']
      end

      if attributes.key?(:'endgame_robot3')
        self.endgame_robot3 = attributes[:'endgame_robot3']
      end

      if attributes.key?(:'auto_cells_bottom')
        self.auto_cells_bottom = attributes[:'auto_cells_bottom']
      end

      if attributes.key?(:'auto_cells_outer')
        self.auto_cells_outer = attributes[:'auto_cells_outer']
      end

      if attributes.key?(:'auto_cells_inner')
        self.auto_cells_inner = attributes[:'auto_cells_inner']
      end

      if attributes.key?(:'teleop_cells_bottom')
        self.teleop_cells_bottom = attributes[:'teleop_cells_bottom']
      end

      if attributes.key?(:'teleop_cells_outer')
        self.teleop_cells_outer = attributes[:'teleop_cells_outer']
      end

      if attributes.key?(:'teleop_cells_inner')
        self.teleop_cells_inner = attributes[:'teleop_cells_inner']
      end

      if attributes.key?(:'stage1_activated')
        self.stage1_activated = attributes[:'stage1_activated']
      end

      if attributes.key?(:'stage2_activated')
        self.stage2_activated = attributes[:'stage2_activated']
      end

      if attributes.key?(:'stage3_activated')
        self.stage3_activated = attributes[:'stage3_activated']
      end

      if attributes.key?(:'stage3_target_color')
        self.stage3_target_color = attributes[:'stage3_target_color']
      end

      if attributes.key?(:'endgame_rung_is_level')
        self.endgame_rung_is_level = attributes[:'endgame_rung_is_level']
      end

      if attributes.key?(:'auto_init_line_points')
        self.auto_init_line_points = attributes[:'auto_init_line_points']
      end

      if attributes.key?(:'auto_cell_points')
        self.auto_cell_points = attributes[:'auto_cell_points']
      end

      if attributes.key?(:'auto_points')
        self.auto_points = attributes[:'auto_points']
      end

      if attributes.key?(:'teleop_cell_points')
        self.teleop_cell_points = attributes[:'teleop_cell_points']
      end

      if attributes.key?(:'control_panel_points')
        self.control_panel_points = attributes[:'control_panel_points']
      end

      if attributes.key?(:'endgame_points')
        self.endgame_points = attributes[:'endgame_points']
      end

      if attributes.key?(:'teleop_points')
        self.teleop_points = attributes[:'teleop_points']
      end

      if attributes.key?(:'shield_operational_ranking_point')
        self.shield_operational_ranking_point = attributes[:'shield_operational_ranking_point']
      end

      if attributes.key?(:'shield_energized_ranking_point')
        self.shield_energized_ranking_point = attributes[:'shield_energized_ranking_point']
      end

      if attributes.key?(:'tba_shield_energized_ranking_point_from_foul')
        self.tba_shield_energized_ranking_point_from_foul = attributes[:'tba_shield_energized_ranking_point_from_foul']
      end

      if attributes.key?(:'tba_num_robots_hanging')
        self.tba_num_robots_hanging = attributes[:'tba_num_robots_hanging']
      end

      if attributes.key?(:'foul_count')
        self.foul_count = attributes[:'foul_count']
      end

      if attributes.key?(:'tech_foul_count')
        self.tech_foul_count = attributes[:'tech_foul_count']
      end

      if attributes.key?(:'adjust_points')
        self.adjust_points = attributes[:'adjust_points']
      end

      if attributes.key?(:'foul_points')
        self.foul_points = attributes[:'foul_points']
      end

      if attributes.key?(:'rp')
        self.rp = attributes[:'rp']
      end

      if attributes.key?(:'total_points')
        self.total_points = attributes[:'total_points']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          init_line_robot1 == o.init_line_robot1 &&
          endgame_robot1 == o.endgame_robot1 &&
          init_line_robot2 == o.init_line_robot2 &&
          endgame_robot2 == o.endgame_robot2 &&
          init_line_robot3 == o.init_line_robot3 &&
          endgame_robot3 == o.endgame_robot3 &&
          auto_cells_bottom == o.auto_cells_bottom &&
          auto_cells_outer == o.auto_cells_outer &&
          auto_cells_inner == o.auto_cells_inner &&
          teleop_cells_bottom == o.teleop_cells_bottom &&
          teleop_cells_outer == o.teleop_cells_outer &&
          teleop_cells_inner == o.teleop_cells_inner &&
          stage1_activated == o.stage1_activated &&
          stage2_activated == o.stage2_activated &&
          stage3_activated == o.stage3_activated &&
          stage3_target_color == o.stage3_target_color &&
          endgame_rung_is_level == o.endgame_rung_is_level &&
          auto_init_line_points == o.auto_init_line_points &&
          auto_cell_points == o.auto_cell_points &&
          auto_points == o.auto_points &&
          teleop_cell_points == o.teleop_cell_points &&
          control_panel_points == o.control_panel_points &&
          endgame_points == o.endgame_points &&
          teleop_points == o.teleop_points &&
          shield_operational_ranking_point == o.shield_operational_ranking_point &&
          shield_energized_ranking_point == o.shield_energized_ranking_point &&
          tba_shield_energized_ranking_point_from_foul == o.tba_shield_energized_ranking_point_from_foul &&
          tba_num_robots_hanging == o.tba_num_robots_hanging &&
          foul_count == o.foul_count &&
          tech_foul_count == o.tech_foul_count &&
          adjust_points == o.adjust_points &&
          foul_points == o.foul_points &&
          rp == o.rp &&
          total_points == o.total_points
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [init_line_robot1, endgame_robot1, init_line_robot2, endgame_robot2, init_line_robot3, endgame_robot3, auto_cells_bottom, auto_cells_outer, auto_cells_inner, teleop_cells_bottom, teleop_cells_outer, teleop_cells_inner, stage1_activated, stage2_activated, stage3_activated, stage3_target_color, endgame_rung_is_level, auto_init_line_points, auto_cell_points, auto_points, teleop_cell_points, control_panel_points, endgame_points, teleop_points, shield_operational_ranking_point, shield_energized_ranking_point, tba_shield_energized_ranking_point_from_foul, tba_num_robots_hanging, foul_count, tech_foul_count, adjust_points, foul_points, rp, total_points].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        TBA API v3 Ruby Client.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
